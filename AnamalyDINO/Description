1. Description de l'approche à appliquer 

Deux approches ont été mises en œuvre : l’ajustement des hyperparamètres et la résolution harmonisée au redimensionnement des patchs (voir mémoire section 3.4). 
Pour la deuxième approche, il est essentiel de bien prendre en compte l’hyperparamètre resolution d’AnomalyDINO, qui doit être adapté en fonction de la version du dataset utilisée (128, 256 ou 512).

-----------------------------------------------------------------------------------------

2. Description du contenu :

_______________ Scripts Sources ____________________

backbones.py : contient le code source responsable de l’extraction des features à partir du réseau de fondation (backbone) (À conserver tel quel).

detection.py : contient le code source du mécanisme de détection d’AnomalyDINO (À conserver tel quel). 


post_eval.py : évalue les performances d’AnomalyDINO après exécution (Seul le nom du dataset doit être modifié si nécessaire).

run_anomalydino.py : lance AnomalyDINO en mode few-shot.

run_anomalydino_batched.py : lance AnomalyDINO en mode zero-shot.

utils.py : gère le prétraitement des données et la définition du dataset (Seul le nom du dataset doit être modifié si nécessaire).

visualize.py : permet la visualisation des résultats obtenus avec AnomalyDINO (À conserver tel quel). 

________________________________________________________

add_mask_to_gth.py : ajoute le suffixe _mask aux patchs du ground truth. Cette étape est indispensable avant de lancer AnomalyDINO.

convertblack.py: convertit les résultats de détection générés par AnomalyDINO en échelle binaire.

createblack.py : crée un dossier good dans le ground truth.

recalculate_metrics.py : recalcule les métriques Pixel F1Score et Image F1Score.



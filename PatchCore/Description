1. Description de l'approche à appliquer 


-----------------------------------------------------------------------------------------

2. Description du contenu : 


PatchCore_detection.py : le code source qui fait tourner le modèle PatchCore	

adapteimages.py : si on a besoin d'appliquer un débruitage pour réduire le bruit de granularité des plaques de cuivre (approche d'amélioration)
	

check.py : permet de vérifier s'il y a meme nombre d'images en test et ground_truth 
	

convertoutputtomask.py : permet de convertir les masques de détection appliqués sur les patchs de test obtenus en sortie de PatchCore en noir et blanc (échelle binaire)
	

erodingtiles.py : script d'érodage des patchs de test
	

image_cleaning.py : le script principal qui permet la division des images originales (droite/gauche) en patchs et reconstruire le dataset en fonction de ground_truth, train et test
	

no_black_pad.py : permet de filtrer les patchs d'entrainement pour supprimer les patchs qui ont un nombre de pixel >= seuil à choisir (de 50% à 90%)
	

output_mask_intersection.py : permet de garder en échelle binaire les zones d'intersection entre les patchs érodés issus de erodingtiles.py et les masques de détection issus de convertoutputtomask.py
	

reconstructtilefrommask.py : les résulats de détection issus de output_mask_intersection.py seront réajuster sur les patchs de test originaux 
	

remove_black.py : nettoyer dataset des patchs qo sont complètement noirs
	

tresholdtiles.py : convertir les patchs de test en noir et blanc (écelle binaire) 
